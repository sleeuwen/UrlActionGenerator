using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;

namespace UrlActionGenerator
{
    public static partial class CodeGenerator
    {
        public static void WriteUrlPages(IndentedTextWriter writer, List<PageAreaDescriptor> areas)
        {
            writer.WriteLines(@"/// <auto-generated />
namespace Microsoft.AspNetCore.Mvc
{
    public static partial class UrlHelperExtensions
    {");

            writer.Indent += 2;
            foreach (var area in areas)
            {
                WriteAreaPages(writer, area);
            }
            writer.Indent -= 2;

            writer.WriteLines(@"
    }
}");
        }

        public static void WriteAreaPages(IndentedTextWriter writer, PageAreaDescriptor area)
        {
            CodeGenerator.WriteAreaClassStart(writer, $"{area.Name}UrlPages", $"{area.Name}Pages");
            WriteFoldersAndPages(writer, area);
            CodeGenerator.WriteAreaClassEnd(writer);
        }

        public static void WriteFolder(IndentedTextWriter writer, PageFolderDescriptor folder)
        {
            CodeGenerator.WriteHelperClassStart(writer, $"{folder.Name}PagesFolder", folder.Name);
            WriteFoldersAndPages(writer, folder);
            CodeGenerator.WriteHelperClassEnd(writer);
        }

        private static void WriteFoldersAndPages(IndentedTextWriter writer, IPagesFoldersDescriptor folder)
        {
            var first = true;
            foreach (var childFolder in folder.Folders)
            {
                if (!first)
                    writer.WriteLineNoTabs("");
                first = false;

                WriteFolder(writer, childFolder);
            }

            foreach (var page in folder.Pages)
            {
                if (!first)
                    writer.WriteLineNoTabs("");
                first = false;

                WritePages(writer, page);
            }
        }

        public static void WritePages(IndentedTextWriter writer, PageDescriptor page)
        {
            writer.Write($"public string {Path.GetFileName(page.Name)}{page.PageHandler}(");
            CodeGenerator.WriteMethodParameters(writer, page.Parameters);
            writer.WriteLine(")");

            writer.Write($"    => urlHelper.Page(\"{page.Name}\", new {{ area = \"{page.Area.Name}\", pageHandler = \"{page.PageHandler}\"");
            CodeGenerator.WriteRouteParameters(writer, page.Parameters);
            writer.WriteLine(" });");
        }
    }
}
