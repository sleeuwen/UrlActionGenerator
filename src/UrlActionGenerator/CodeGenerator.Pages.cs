using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace UrlActionGenerator
{
    public static partial class CodeGenerator
    {
        public static void WriteUrlPages(IndentedTextWriter writer, List<PageAreaDescriptor> areas)
        {
            writer.WriteLine("/// <auto-generated />");
            writer.WriteLine("namespace Microsoft.AspNetCore.Mvc");
            writer.WriteLine("{");
            writer.Indent++;

            writer.WriteLine($"public static partial class UrlHelperExtensions");
            writer.WriteLine("{");
            writer.Indent++;

            foreach (var area in areas)
            {
                WriteAreaPages(writer, area);
            }

            writer.Indent--;
            writer.WriteLine("}");
            writer.Indent--;
            writer.WriteLine("}");
        }

        public static void WriteAreaPages(IndentedTextWriter writer, PageAreaDescriptor area)
        {
            writer.WriteLine($"public static {area.Name}UrlPages {area.Name}Pages(this IUrlHelper urlHelper)");
            writer.Indent++;
            writer.WriteLine($"=> new {area.Name}UrlPages(urlHelper);");
            writer.Indent--;
            writer.WriteLineNoTabs("");

            writer.WriteLine($"public class {area.Name}UrlPages");
            writer.WriteLine("{");
            writer.Indent++;

            writer.WriteLine("private readonly IUrlHelper urlHelper;");
            writer.WriteLine($"public {area.Name}UrlPages(IUrlHelper urlHelper)");
            writer.WriteLine("{");
            writer.Indent++;
            writer.WriteLine("this.urlHelper = urlHelper;");
            writer.Indent--;
            writer.WriteLine("}\n");

            var first = true;
            foreach (var folder in area.Folders)
            {
                if (!first)
                    writer.WriteLineNoTabs("");
                first = false;

                WriteFolder(writer, folder);
            }

            foreach (var page in area.Pages)
            {
                if (!first)
                    writer.WriteLineNoTabs("");
                first = false;

                WritePages(writer, page);
            }

            writer.Indent--;
            writer.WriteLine("}\n");
        }

        public static void WriteFolder(IndentedTextWriter writer, PageFolderDescriptor folder)
        {
            writer.WriteLine($"public {folder.Name}PagesFolder {folder.Name}");
            writer.Indent++;
            writer.WriteLine($"=> new {folder.Name}PagesFolder(urlHelper);");
            writer.Indent--;
            writer.WriteLineNoTabs("");

            writer.WriteLine($"public class {folder.Name}PagesFolder");
            writer.WriteLine("{");
            writer.Indent++;

            writer.WriteLine("private readonly IUrlHelper urlHelper;");
            writer.WriteLine($"public {folder.Name}PagesFolder(IUrlHelper urlHelper)");
            writer.WriteLine("{");
            writer.Indent++;
            writer.WriteLine("this.urlHelper = urlHelper;");
            writer.Indent--;
            writer.WriteLine("}\n");

            var first = true;
            foreach (var childFolder in folder.Folders)
            {
                if (!first)
                    writer.WriteLineNoTabs("");
                first = false;

                WriteFolder(writer, childFolder);
            }

            foreach (var page in folder.Pages)
            {
                if (!first)
                    writer.WriteLineNoTabs("");
                first = false;

                WritePages(writer, page);
            }

            writer.Indent--;
            writer.WriteLine("}");
        }

        public static void WritePages(IndentedTextWriter writer, PageDescriptor page)
        {
            writer.Write($"public string {Path.GetFileName(page.Name)}{page.PageHandler}(");

            var first = true;
            foreach (var parameter in page.Parameters)
            {
                if (!first)
                    writer.Write(", ");
                first = false;

                writer.Write(parameter.Type);
                writer.Write(" @");
                writer.Write(parameter.Name);

                if (parameter.HasDefaultValue)
                {
                    writer.Write(" = ");
                    writer.Write(parameter.DefaultValue switch
                    {
                        null => "default",
                        string str => $"\"{str.Replace("\"", "\\\"")}\"",
                        var val => val.ToString(),
                    });
                }
            }

            writer.WriteLine(")");
            writer.Indent++;
            writer.Write($"=> urlHelper.Page(\"{page.Name}\", new {{ area = \"{page.Area.Name}\", pageHandler = \"{page.PageHandler}\"");

            foreach (var parameter in page.Parameters)
            {
                writer.Write($", @{parameter.Name}");
            }

            writer.WriteLine(" });");
            writer.Indent--;
        }
    }
}
