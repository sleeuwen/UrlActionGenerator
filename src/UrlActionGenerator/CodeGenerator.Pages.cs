using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using UrlActionGenerator.Descriptors;
using UrlActionGenerator.Extensions;

namespace UrlActionGenerator
{
    public static partial class CodeGenerator
    {
        public static void WriteUrlPages(IndentedTextWriter writer, List<PageAreaDescriptor> areas)
        {
            writer.WriteLines(@"/// <auto-generated />
namespace Microsoft.AspNetCore.Mvc
{
    public static partial class UrlActionGenerator_UrlHelperExtensions
    {");

            writer.Indent += 2;
            foreach (var area in areas)
            {
                WriteAreaPages(writer, area);
            }
            writer.Indent -= 2;

            writer.WriteLines(@"
    }
}");
        }

        public static void WriteAreaPages(IndentedTextWriter writer, PageAreaDescriptor area)
        {
            CodeGenerator.WriteAreaClassStart(writer, $"{area.Name}UrlPages", $"{area.Name}Pages");
            WriteFoldersAndPages(writer, area);
            CodeGenerator.WriteAreaClassEnd(writer);
        }

        public static void WriteFolder(IndentedTextWriter writer, PageFolderDescriptor folder)
        {
            CodeGenerator.WriteHelperClassStart(writer, $"{folder.Name}PagesFolder", folder.Name);
            WriteFoldersAndPages(writer, folder);
            CodeGenerator.WriteHelperClassEnd(writer);
        }

        private static void WriteFoldersAndPages(IndentedTextWriter writer, IPagesFoldersDescriptor folder)
        {
            foreach (var pageHandlers in folder.Pages.GroupBy(page => page.Name))
            {
                foreach (var page in pageHandlers.Where(handler => string.IsNullOrEmpty(handler.PageHandler)))
                {
                    WritePage(writer, page);
                }

                if (pageHandlers.Any(handler => !string.IsNullOrEmpty(handler.PageHandler)))
                {
                    WritePageHandlers(writer, pageHandlers.Where(handler => !string.IsNullOrEmpty(handler.PageHandler)));
                }
            }

            foreach (var childFolder in folder.Folders)
            {
                WriteFolder(writer, childFolder);
            }
        }

        private static void WritePage(IndentedTextWriter writer, PageDescriptor page)
        {
            writer.Write($"public string {Path.GetFileName(page.Name)}(");
            CodeGenerator.WriteMethodParameters(writer, page.Parameters);
            writer.WriteLine(")");

            writer.WriteLine("{");
            writer.Indent++;

            CodeGenerator.WriteRouteValues(writer, page.Parameters, new Dictionary<string, object> { ["area"] = page.Area.Name, ["handler"] = page.PageHandler });
            writer.WriteLine($@"return urlHelper.Page(""{page.Name}"", __routeValues);");

            writer.Indent--;
            writer.WriteLine("}\n");
        }

        private static void WritePageHandlers(IndentedTextWriter writer, IEnumerable<PageDescriptor> pageHandlers)
        {
            CodeGenerator.WriteHelperClassStart(writer, $"{Path.GetFileName(pageHandlers.First().Name)}PageHandlers", $"{Path.GetFileName(pageHandlers.First().Name)}Handlers");
            foreach (var handler in pageHandlers)
            {
                WriteHandler(writer, handler);
            }
            CodeGenerator.WriteHelperClassEnd(writer);
        }

        public static void WriteHandler(IndentedTextWriter writer, PageDescriptor page)
        {
            writer.Write($"public string {page.PageHandler}(");
            CodeGenerator.WriteMethodParameters(writer, page.Parameters);
            writer.WriteLine(")");

            writer.WriteLine("{");
            writer.Indent++;

            CodeGenerator.WriteRouteValues(writer, page.Parameters, new Dictionary<string, object> { ["area"] = page.Area.Name, ["handler"] = page.PageHandler });
            writer.WriteLine($@"return urlHelper.Page(""{page.Name}"", __routeValues);");

            writer.Indent--;
            writer.WriteLine("}\n");
        }
    }
}
