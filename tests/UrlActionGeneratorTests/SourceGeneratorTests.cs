using System.Collections.Immutable;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing;
using Microsoft.CodeAnalysis.Testing.Verifiers;
using Microsoft.CodeAnalysis.Text;
using UrlActionGenerator;
using Xunit;

namespace UrlActionGeneratorTests
{
    public class SourceGeneratorTests
    {
        private static readonly SourceText EmptyHelperSourceText = SourceText.From(@"// <auto-generated />
namespace Microsoft.AspNetCore.Mvc
{
    public static partial class UrlActionGenerator_UrlHelperExtensions
    {
    }
}
", Encoding.UTF8);

        [Fact]
        public async Task Execute_MVC_Success()
        {
            await new SourceGeneratorTest
            {
                TestState =
                {
                    Sources =
                    {
                        ("HomeController.cs", @"
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;

namespace TestCode
{
    public class HomeController : Controller
    {
        public IActionResult Index()
        {
            return View();
        }
    }
}"),
                    },
                    GeneratedSources =
                    {
                        ("UrlActionGenerator/UrlActionGenerator.SourceGenerator/UrlActionGenerator_UrlHelperExtensions.Mvc.g.cs", SourceText.From(@"// <auto-generated />
namespace Microsoft.AspNetCore.Mvc
{
    public static partial class UrlActionGenerator_UrlHelperExtensions
    {
        public static UrlActions Actions(this IUrlHelper urlHelper)
            => new UrlActions(urlHelper);

        public class UrlActions
        {
            private readonly IUrlHelper urlHelper;
            public UrlActions(IUrlHelper urlHelper)
            {
                this.urlHelper = urlHelper;
            }

            public HomeControllerActions Home
                => new HomeControllerActions(urlHelper);

            public class HomeControllerActions
            {
                private readonly IUrlHelper urlHelper;
                public HomeControllerActions(IUrlHelper urlHelper)
                {
                    this.urlHelper = urlHelper;
                }

                public string Index()
                {
                    var __routeValues = Microsoft.AspNetCore.Routing.RouteValueDictionary.FromArray(new System.Collections.Generic.KeyValuePair<string, object>[] {
                        new System.Collections.Generic.KeyValuePair<string, object>(""area"", """"),
                    });
                    return urlHelper.Action(""Index"", ""Home"", __routeValues);
                }

            }

        }

    }
}
", Encoding.UTF8)),
                        ("UrlActionGenerator/UrlActionGenerator.SourceGenerator/UrlActionGenerator_UrlHelperExtensions.Pages.g.cs", EmptyHelperSourceText),
                    },
                },
            }.RunAsync();
        }

        [Fact]
        public async Task Execute_MVC_KeywordParameter_Success()
        {
            await new SourceGeneratorTest
            {
                TestState =
                {
                    Sources =
                    {
                        ("HomeController.cs", SourceText.From(@"
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;

namespace TestCode
{
    public class HomeController : Controller
    {
        public IActionResult Index(string @return)
        {
            return View(new { value = @return });
        }
    }
}", Encoding.UTF8)),
                    },
                    GeneratedSources =
                    {
                        ("UrlActionGenerator/UrlActionGenerator.SourceGenerator/UrlActionGenerator_UrlHelperExtensions.Mvc.g.cs", SourceText.From(@"// <auto-generated />
namespace Microsoft.AspNetCore.Mvc
{
    public static partial class UrlActionGenerator_UrlHelperExtensions
    {
        public static UrlActions Actions(this IUrlHelper urlHelper)
            => new UrlActions(urlHelper);

        public class UrlActions
        {
            private readonly IUrlHelper urlHelper;
            public UrlActions(IUrlHelper urlHelper)
            {
                this.urlHelper = urlHelper;
            }

            public HomeControllerActions Home
                => new HomeControllerActions(urlHelper);

            public class HomeControllerActions
            {
                private readonly IUrlHelper urlHelper;
                public HomeControllerActions(IUrlHelper urlHelper)
                {
                    this.urlHelper = urlHelper;
                }

                public string Index(string @return)
                {
                    var __routeValues = Microsoft.AspNetCore.Routing.RouteValueDictionary.FromArray(new System.Collections.Generic.KeyValuePair<string, object>[] {
                        new System.Collections.Generic.KeyValuePair<string, object>(""area"", """"),
                        new System.Collections.Generic.KeyValuePair<string, object>(""return"", @return),
                    });
                    return urlHelper.Action(""Index"", ""Home"", __routeValues);
                }

            }

        }

    }
}
", Encoding.UTF8)),
                        ("UrlActionGenerator/UrlActionGenerator.SourceGenerator/UrlActionGenerator_UrlHelperExtensions.Pages.g.cs", EmptyHelperSourceText),
                    },
                },
            }.RunAsync();
        }

        [Fact]
        public async Task Execute_Pages_Success()
        {
            await new SourceGeneratorTest
            {
                TestState =
                {
                    Sources =
                    {
                        ("Pages/Feature/Page.cs", SourceText.From(@"
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace AspNetCoreSamplePages.Pages.Feature
{
    public class Page : PageModel
    {
        [BindProperty(SupportsGet = true)]
        public string GetProperty { get; set; }

        [BindProperty(SupportsGet = true, Name = ""NamedGetProperty"")]
        public string GetProperty2 { get; set; }

        [BindProperty]
        public string PostProperty { get; set; }

        [FromQuery]
        public string QueryParameter { get; set; }

        [FromQuery(Name = ""NamedQueryParameter"")]
        public string QueryParameter2 { get; set; }

        public void OnGet(int page, int pageSize)
        {
        }

        public async Task OnPostAsync(string str)
        {
            await Task.Delay(1);
        }

        public async Task OnGetHandlerAsync()
        {
            await Task.Delay(1);
        }
    }
}", Encoding.UTF8)),
                    },
                    AdditionalFiles =
                    {
                        ("Pages/Feature/Page.cshtml", SourceText.From(@"@page ""{id:int}""
@model AspNetCoreSamplePages.Pages.Feature.Page

<h1>Hello, World!</h1>
", Encoding.UTF8)),
                    },
                    GeneratedSources =
                    {
                        ("UrlActionGenerator/UrlActionGenerator.SourceGenerator/UrlActionGenerator_UrlHelperExtensions.Mvc.g.cs", EmptyHelperSourceText),
                        ("UrlActionGenerator/UrlActionGenerator.SourceGenerator/UrlActionGenerator_UrlHelperExtensions.Pages.g.cs", SourceText.From(@"// <auto-generated />
namespace Microsoft.AspNetCore.Mvc
{
    public static partial class UrlActionGenerator_UrlHelperExtensions
    {
        public static UrlPages Pages(this IUrlHelper urlHelper)
            => new UrlPages(urlHelper);

        public class UrlPages
        {
            private readonly IUrlHelper urlHelper;
            public UrlPages(IUrlHelper urlHelper)
            {
                this.urlHelper = urlHelper;
            }

            public FeaturePagesFolder Feature
                => new FeaturePagesFolder(urlHelper);

            public class FeaturePagesFolder
            {
                private readonly IUrlHelper urlHelper;
                public FeaturePagesFolder(IUrlHelper urlHelper)
                {
                    this.urlHelper = urlHelper;
                }

                public string Page(int @id, int @page, int @pageSize, string @getProperty = default, string @namedGetProperty = default, string @queryParameter = default, string @namedQueryParameter = default)
                {
                    var __routeValues = Microsoft.AspNetCore.Routing.RouteValueDictionary.FromArray(new System.Collections.Generic.KeyValuePair<string, object>[] {
                        new System.Collections.Generic.KeyValuePair<string, object>(""area"", """"),
                        new System.Collections.Generic.KeyValuePair<string, object>(""handler"", """"),
                        new System.Collections.Generic.KeyValuePair<string, object>(""id"", @id),
                        new System.Collections.Generic.KeyValuePair<string, object>(""page"", @page),
                        new System.Collections.Generic.KeyValuePair<string, object>(""pageSize"", @pageSize),
                        new System.Collections.Generic.KeyValuePair<string, object>(""getProperty"", @getProperty),
                        new System.Collections.Generic.KeyValuePair<string, object>(""namedGetProperty"", @namedGetProperty),
                        new System.Collections.Generic.KeyValuePair<string, object>(""queryParameter"", @queryParameter),
                        new System.Collections.Generic.KeyValuePair<string, object>(""namedQueryParameter"", @namedQueryParameter),
                    });
                    return urlHelper.Page(""/Feature/Page"", __routeValues);
                }

                public string Page(int @id, string @str, string @getProperty = default, string @namedGetProperty = default, string @queryParameter = default, string @namedQueryParameter = default)
                {
                    var __routeValues = Microsoft.AspNetCore.Routing.RouteValueDictionary.FromArray(new System.Collections.Generic.KeyValuePair<string, object>[] {
                        new System.Collections.Generic.KeyValuePair<string, object>(""area"", """"),
                        new System.Collections.Generic.KeyValuePair<string, object>(""handler"", """"),
                        new System.Collections.Generic.KeyValuePair<string, object>(""id"", @id),
                        new System.Collections.Generic.KeyValuePair<string, object>(""str"", @str),
                        new System.Collections.Generic.KeyValuePair<string, object>(""getProperty"", @getProperty),
                        new System.Collections.Generic.KeyValuePair<string, object>(""namedGetProperty"", @namedGetProperty),
                        new System.Collections.Generic.KeyValuePair<string, object>(""queryParameter"", @queryParameter),
                        new System.Collections.Generic.KeyValuePair<string, object>(""namedQueryParameter"", @namedQueryParameter),
                    });
                    return urlHelper.Page(""/Feature/Page"", __routeValues);
                }

                public PagePageHandlers PageHandlers
                    => new PagePageHandlers(urlHelper);

                public class PagePageHandlers
                {
                    private readonly IUrlHelper urlHelper;
                    public PagePageHandlers(IUrlHelper urlHelper)
                    {
                        this.urlHelper = urlHelper;
                    }

                    public string Handler(int @id, string @getProperty = default, string @namedGetProperty = default, string @queryParameter = default, string @namedQueryParameter = default)
                    {
                        var __routeValues = Microsoft.AspNetCore.Routing.RouteValueDictionary.FromArray(new System.Collections.Generic.KeyValuePair<string, object>[] {
                            new System.Collections.Generic.KeyValuePair<string, object>(""area"", """"),
                            new System.Collections.Generic.KeyValuePair<string, object>(""handler"", ""Handler""),
                            new System.Collections.Generic.KeyValuePair<string, object>(""id"", @id),
                            new System.Collections.Generic.KeyValuePair<string, object>(""getProperty"", @getProperty),
                            new System.Collections.Generic.KeyValuePair<string, object>(""namedGetProperty"", @namedGetProperty),
                            new System.Collections.Generic.KeyValuePair<string, object>(""queryParameter"", @queryParameter),
                            new System.Collections.Generic.KeyValuePair<string, object>(""namedQueryParameter"", @namedQueryParameter),
                        });
                        return urlHelper.Page(""/Feature/Page"", __routeValues);
                    }

                }

            }

        }

    }
}
", Encoding.UTF8)),
                    },
                },
            }.RunAsync();
        }

        [Fact]
        public async Task Execute_RazorViewsAssembly_DoesNothing()
        {
            await new SourceGeneratorViewsAssemblyTest
            {
                TestState =
                {
                    Sources =
                    {
                        ("Pages/Feature/Page.cs", SourceText.From(@"
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;

[assembly: global::Microsoft.AspNetCore.Mvc.ApplicationParts.ProvideApplicationPartFactoryAttribute(""Microsoft.AspNetCore.Mvc.ApplicationParts.CompiledRazorAssemblyApplicationPartFactory, Microsoft.AspNetCore.Mvc.Razor"")]

namespace AspNetCoreSamplePages.Pages.Feature
{
    public class Page : PageModel
    {
        [BindProperty(SupportsGet = true)]
        public string GetProperty { get; set; }

        [BindProperty(SupportsGet = true, Name = ""NamedGetProperty"")]
        public string GetProperty2 { get; set; }

        [BindProperty]
        public string PostProperty { get; set; }

        [FromQuery]
        public string QueryParameter { get; set; }

        [FromQuery(Name = ""NamedQueryParameter"")]
        public string QueryParameter2 { get; set; }

        public void OnGet(int page, int pageSize)
        {
        }

        public async Task OnPostAsync(string str)
        {
            await Task.Delay(1);
        }

        public async Task OnGetHandlerAsync()
        {
            await Task.Delay(1);
        }
    }
}
", Encoding.UTF8)),
                    },
                    AdditionalFiles =
                    {
                        ("Pages/Feature/Page.cshtml", SourceText.From(@"@page ""{id:int}""
@model AspNetCoreSamplePages.Pages.Feature.Page

<h1>Hello, World!</h1>
", Encoding.UTF8)),
                    },
                    GeneratedSources =
                    {
                    },
                },
            }.RunAsync();
        }

        private class SourceGeneratorTest : CSharpSourceGeneratorTest<SourceGenerator, XUnitVerifier>
        {
            public SourceGeneratorTest()
            {
                ReferenceAssemblies = ReferenceAssemblies.Net.Net50
                    .WithPackages(ImmutableArray.Create(new PackageIdentity("Microsoft.AspNetCore.App.Ref", "5.0.0")));
            }
        }

        private class SourceGeneratorViewsAssemblyTest : SourceGeneratorTest
        {
            protected override string DefaultTestProjectName => "TestProject.Views";
        }
    }

    internal class InMemoryAdditionalText : AdditionalText
    {
        private string _text;

        public InMemoryAdditionalText(string path, string text)
        {
            Path = path;
            _text = text;
        }

        public override SourceText GetText(CancellationToken cancellationToken = new CancellationToken())
        {
            return SourceText.From(_text);
        }

        public override string Path { get; }
    }
}
